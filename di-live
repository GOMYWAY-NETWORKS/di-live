#!/usr/bin/python

import os
from os.path import *

import debconf

class Error(Exception):
    pass

class Component:
    """class for managing a component"""

    def __init__(self, path):
        self.path = path
        self.name = basename(path)
        self.title = self.name # until components have titles
        self.exitcode = None

    def execute(self):
        error = os.system(self.path)
        if error:
            self.exitcode = os.WEXITSTATUS(error)
            return False

        self.exitcode = 0
        return True

class Components(dict):
    """class for holding components"""

    def __init__(self, dirpath):
        if not exists(dirpath):
            raise Error('does not exist: %s' % dirpath)

        for file in os.listdir(dirpath):
            try:
                self.add(join(dirpath, file))
            except:
                pass

    def __iter__(self):
        """return components in alpha-numeric ordering according to name"""
        keys = self.keys()
        keys.sort()
        for key in keys:
            yield self[key]

    @staticmethod
    def _is_executable(path):
        if os.stat(path).st_mode & 0111 == 0:
            return False
        return True

    def add(self, path):
        if not self._is_executable(path):
            raise Error('not executable: %s' % path)

        name = basename(path)
        self[name] = Component(path)
    
    def remove(self, name):
        del self[name]

class Menu:
    def __init__(self, template, title=None):
        debconf.runFrontEnd()
        self.template = template
        self.db = debconf.Debconf(title)

    def __del__(self):
        self.db.stop()

    def display(self, choices):
        self.db.reset(self.template)
        self.db.subst(self.template, 'CHOICES', choices)
        self.db.input('high', self.template)
        self.db.go()

    def get_choice(self):
        return self.db.get(self.template)

class Components_Menu:
    def __init__(self, component_dir, menu_template, menu_title=None):
        self.components = Components(component_dir)
        self.menu = Menu(menu_template, menu_title)

    def _get_next_component(self):
        priority = os.environ.get('DEBIAN_PRIORITY')
        if priority == 'low' or priority == 'medium':
            self.menu.display(", ".join([ c.title for c in self.components ]))

            title = self.menu.get_choice()
            for c in self.components:
                if c.title == title:
                    return c
        else:
            for c in self.components:
                if c.name > self.last:
                    return c

        return None

    def run(self):
        self.last = '0'
        priority = os.environ.get('DEBIAN_PRIORITY')
        while 1:
            component = self._get_next_component()
            if component is None:
                return

            if component.execute():
                self.last = component.name
                os.environ['DEBIAN_PRIORITY'] = priority
            else:
                if priority == 'low':
                    os.environ['DEBIAN_PRIORITY'] = 'low'
                else:
                    os.environ['DEBIAN_PRIORITY'] = 'medium'


def main():
    components_dir = '/usr/lib/di-live.d'
    menu_template = 'di-live/main_menu'
    menu_title = 'Debian Installer Live'

    Components_Menu(components_dir, menu_template, menu_title).run()


if __name__ == "__main__":
    main()

