#!/usr/bin/python
# Copyright (c) 2008 Alon Swartz <alon@turnkeylinux.org> - all rights reserved

import os
import sys
import time
import debconf

import common

class Chroot:
    def __init__(self, newroot, environ={}):
        self.environ = { 'HOME': '/root',
                         'TERM': os.environ['TERM'],
                         'LC_ALL': 'C',
                         'PATH': "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/bin:/usr/sbin" }
        self.environ.update(environ)
        self.path = os.path.realpath(newroot)

    def _prepare_command(self, *command):
        env = ['env', '-i' ] + [ name + "=" + val
                                 for name, val in self.environ.items() ]

        command = common.fmt_command(*command)
        return ("chroot", self.path, 'sh', '-c', " ".join(env) + " " + command)

    def system(self, *command):
        """execute system command in chroot -> None"""
        common.system(*self._prepare_command(*command))

class DebconfPass:
    def __init__(self, package):
        self.package = package

        debconf.runFrontEnd()
        self.db = debconf.Debconf()
        self.db.capb('backup')

        self.password = ""

    def __del__(self):
        self.db.stop()

    def _db_input(self, template):
        template = "%s/%s" % (self.package, template)
        self.db.reset(template)
        self.db.input(debconf.HIGH, template)
        try:
            self.db.go()
        except debconf.DebconfError, e:
            self.db.stop()
            sys.exit(e[0])

        ret = self.db.get(template)
        self.db.reset(template)
        return ret

    def ask(self, password, password_again, allow_empty=True):
        while 1:
            self.password = self._db_input(password)
            if self.password == self._db_input(password_again):
                if not self.password and not allow_empty:
                    self._db_input('password_empty')
                    continue
                
                break

            self._db_input('password_mismatch')

def main():
    if not common.target_mounted('/target'):
        sys.exit(10) #return to menu

    m = DebconfPass('di-live')
    m.ask('mysql_root_password',
          'mysql_root_password_again',
          m.db.getBoolean('di-live/mysql_allow_empty_root_password'))

    chroot = Chroot('/target')
    chroot.system('mysqld --skip-grant-tables --skip-networking > /dev/null 2>&1 &')
    for i in range(6):
        try:
            chroot.system('mysqladmin ping > /dev/null 2>&1')
            break
        except:
            time.sleep(1)

    chroot.system('mysql --batch --execute "update mysql.user set \
                  Password=PASSWORD(\'%s\') where User=\'root\'; \
                  flush privileges;"' % m.password)

    chroot.system('mysqladmin --defaults-file=/etc/mysql/debian.cnf shutdown')

if __name__ == "__main__":
    main()

